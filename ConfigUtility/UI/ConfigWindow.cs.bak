using ConfigUtility;
using ConfigUtility.UI;

namespace BGEEConfig.UI
{
    public delegate void GameSelectedHandler(int GameID);

    public partial class ConfigWindow : BaseWindow
    {
        private readonly string BG1LuaConfig_Path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                                                                 "Baldur's Gate - Enhanced Edition",
                                                                 "Baldur.lua");

        private readonly string BG2LuaConfig_Path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                                                                 "Baldur's Gate II - Enhanced Edition",
                                                                 "Baldur.lua");

        public bool BG1LuaConfig_Available { get; set; }
        public bool BG2LuaConfig_Available { get; set; }

        private ConfigBackupManager BG_ConfigBackupManager { get; init; }
        private ConfigBackupManager BG2_ConfigBackupManager { get; init; }

        public event GameSelectedHandler? GameSelected;

        public bool IsBG1_Selected => radioButton_ConfigureBGEE.Checked;
        public bool IsBG2_Selected => radioButton_ConfigureBGIIEE.Checked;

        private BaldurPropertyManager? BaldurPropertyManager = null;

        readonly Dictionary<int, string> Graphics_Properties = new()
        {
            { 0, "Graphics,Scale UI" },
            { 1, "Graphics,Show Black Space" },
            { 2, "Graphics,Hardware Mouse Cursor" },
            { 3, "Graphics,Greyscale On Pause" },
            { 4, "Graphics,Area Map Zoom" },
            { 5, "Graphics,Use Sprite Outlines" },
            { 6, "Graphics,Use Character Highlights" },
            { 7, "Graphics,Zoom Lock" },
            { 8, "Graphics,Backend" },
            { 9, "Graphics,Use Nearest Neighbour Scaling" },
            { 10, "Graphics,Maximized" },
            { 11, "Graphics,Full Screen" }
        };

        readonly Dictionary<int, string> Multiplayer_Properties = new()
        {
            { 0, "Multiplayer,Disable Banters" },
            { 1, "Multiplayer,Enable Chat Menu" }
        };

        readonly Dictionary<int, string> ProgramOptionsOne_Properties = new()
        {
            { 0, "Program Options,Translucent Shadows" },
            { 1, "Program Options,Never Show Nuisance SOD" },
            { 2, "Program Options,Display Subtitles" },
            { 3, "Program Options,Sprite Mirror" },
            { 4, "Program Options,Drop Capitals" },
            { 5, "Program Options,3D Acceleration" },
            { 6, "Program Options,Debug Mode" },
            { 7, "Program Options,Disable Cosmetic Attacks" },
            { 8, "Game Options,Pausing Map" },
            { 9, "Game Options,Sprite Mirror" },
            { 10, "Game Options,Sprite Mirror" },
            { 11, "Game Options,Sprite Mirror" },
            { 12, "Game Options,Sprite Mirror" },
            { 13, "Game Options,Show Character HP" },
            { 14, "Game Options,No Difficulty Based XP Bonus" },
            { 15, "Game Options,Infravision" },
            { 16, "Game Options,Render Explored Map" },
            { 17, "Game Options,3E Thief Sneak Attack" }
        };

        readonly Dictionary<int, string> ProgramOptionsTwo_Properties = new()
        {
            { 0, "Game Options,Nightmare Bonus Gold" },
            { 1, "Game Options,Always Dither" },
            { 2, "Game Options,HP Over Head" },
            { 3, "Game Options,Footsteps" },
            { 4, "Game Options,Attack Sounds" },
            { 5, "Game Options,Expire Trap Highlights" },
            { 6, "Game Options,Critical Hit Screen Shake" },
            { 7, "Game Options,Subtitles" },
            { 8, "Game Options,Combat UI" },
            { 9, "Game Options,Render Actions" },
            { 10, "Game Options,Environmental Audio" },
            { 11, "Game Options,Weather" },
            { 12, "Game Options,Classic Selection Circles" },
            { 13, "Game Options,Heal Party on Rest" },
            { 14, "Game Options,Terrain Hugging" },
            { 15, "Game Options,Color Circles" },
            { 16, "Game Options,Extra Feedback" },
            { 17, "Game Options,Cleric Ranger Spells" }
        };

        readonly Dictionary<int, string> ProgramOptionsThree_Properties = new()
        {
            { 0, "Game Options,Show Message Box Hint" },
            { 1, "Game Options,Show Learnable Spells" },
            { 2, "Game Options,Duplicate Floating Text" },
            { 3, "Game Options,Show AOE" },
            { 4, "Game Options,Render Travel Regions" },
            { 5, "Game Options,Quick Item Mapping" },
            { 6, "Game Options,Journal Popups" },
            { 7, "Game Options,Hotkeys On Tooltips" },
            { 8, "Game Options,All Learn Spell Info" },
            { 9, "Game Options,Equipment Comparison" },
            { 10, "Game Options,Confirm Dialog" },
            { 11, "Game Options,Suppress Extra Difficulty Damage" },
            { 12, "Game Options,Over Confirm Everything" },
            { 13, "Game Options,Tutorial State" },
            { 14, "Game Options,Filter Games" },
            { 15, "Game Options,Auto Pause State" },
            { 16, "Program Options,Cloud Saves Enabled" },
            { 17, "Program Options,Active Campaign" }
        };

        // Constructor

        public ConfigWindow()
        {
            InitializeComponent();

            this.BG_ConfigBackupManager = new(this.BG1LuaConfig_Path, "BGEE_Configuration");
            this.BG2_ConfigBackupManager = new(this.BG2LuaConfig_Path, "BG2EE_Configuration");
        }

        // Methods

        private bool FullBackupExists()
        {
            bool status = true;

            status &= this.BG_ConfigBackupManager.BackupExists;
            status &= this.BG2_ConfigBackupManager.BackupExists;

            return status;
        }
        private bool BackupConfiguration(bool Overwrite, bool OnlySelectedGame)
        {
            if (OnlySelectedGame)
            {
                if (IsBG1_Selected && BG1LuaConfig_Available) return this.BG_ConfigBackupManager.CreateBackup(null, Overwrite);
                if (IsBG2_Selected && BG2LuaConfig_Available) return this.BG2_ConfigBackupManager.CreateBackup(null, Overwrite);
            }
            else
            {
                bool status = true;
                
                if (BG1LuaConfig_Available) status &= this.BG_ConfigBackupManager.CreateBackup(null, Overwrite);
                if (BG2LuaConfig_Available) status &= this.BG2_ConfigBackupManager.CreateBackup(null, Overwrite);

                return status;
            }

            return false;
        }

        private void UpdateUI()
        {
            if (BaldurPropertyManager is not null)
            {
                // Update the graphics section

                foreach (var PropertyString in Graphics_Properties)
                {
                    bool status = false;

                    if (BaldurPropertyManager.GetProperty(BaldurPropertyManager.GetPropertyName(PropertyString.Value), out var Value))
                    {
                        status = Convert.ToBoolean(Convert.ToInt16(Value));
                    }

                    checkedListBox_GraphicOptions.SetItemChecked(PropertyString.Key, status);
                }

                // Update game speed section

                Int32 GameSpeed = 30;

                if (BaldurPropertyManager.GetProperty("Maximum Frame Rate", out var Speed))
                {
                    GameSpeed = Convert.ToInt32(Speed);
                }

                this.hScrollBar_GameSpeed.Value = GameSpeed;
                this.label_SpeedValueDisplay.Text = $"{GameSpeed} AI Updates / Sec";

                // Update multiplayer section

                foreach (var PropertyString in Multiplayer_Properties)
                {
                    bool status = false;

                    if(BaldurPropertyManager.GetProperty(BaldurPropertyManager.GetPropertyName(PropertyString.Value), out var Value))
                    {
                        status = Convert.ToBoolean(Convert.ToInt16(Value));
                    }

                    checkedListBox_MultiplayerOptions.SetItemChecked(PropertyString.Key, status);
                }

                // Update program section - first block

                foreach (var PropertyString in ProgramOptionsOne_Properties)
                {
                    bool status = false;

                    if (BaldurPropertyManager.GetProperty(BaldurPropertyManager.GetPropertyName(PropertyString.Value), out var Value))
                    {
                        status = Convert.ToBoolean(Convert.ToInt16(Value));
                    }

                    checkedListBox_ProgramOptionsOne.SetItemChecked(PropertyString.Key, status);
                }

                // Update program section - second block

                foreach (var PropertyString in ProgramOptionsTwo_Properties)
                {
                    bool status = false;

                    if (BaldurPropertyManager.GetProperty(BaldurPropertyManager.GetPropertyName(PropertyString.Value), out var Value))
                    {
                        status = Convert.ToBoolean(Convert.ToInt16(Value));
                    }

                    checkedListBox_ProgramOptionsTwo.SetItemChecked(PropertyString.Key, status);
                }

                // Update program section - third block

                foreach (var PropertyString in ProgramOptionsThree_Properties)
                {
                    bool status = false;

                    if (BaldurPropertyManager.GetProperty(BaldurPropertyManager.GetPropertyName(PropertyString.Value), out var Value))
                    {
                        status = Convert.ToBoolean(Convert.ToInt16(Value));
                    }

                    checkedListBox_ProgramOptionsThree.SetItemChecked(PropertyString.Key, status);
                }
            }
        }

        // Event handlers

        private void HScrollBar_GameSpeed_ValueChanged(object sender, EventArgs e)
        {
            var SelectedSpeedValue = ((HScrollBar)sender).Value.ToString();

            // Update UI
            this.label_SpeedValueDisplay.Text = $"{SelectedSpeedValue} AI Updates / Sec";

            // Update value
            this.BaldurPropertyManager?.SetProperty("Program Options", "Maximum Frame Rate", SelectedSpeedValue);
        }

        private void ConfigWindow_Load(object sender, EventArgs e)
        {
            if (File.Exists(BG1LuaConfig_Path))
            {
                this.label_BGEEStatus.Text = "FOUND";
                this.label_BGEEStatus.ForeColor = Color.LimeGreen;

                this.BG1LuaConfig_Available = true;
                this.radioButton_ConfigureBGEE.Enabled = true;
            }

            if (File.Exists(BG2LuaConfig_Path))
            {
                this.label_BGIIEEStatus.Text = "FOUND";
                this.label_BGIIEEStatus.ForeColor = Color.LimeGreen;

                this.BG2LuaConfig_Available = true;
                this.radioButton_ConfigureBGIIEE.Enabled = true;
            }

            this.GameSelected += ConfigWindow_OnGameSelected;

            // Do not overwrite any existing backups on load

            if(!FullBackupExists())
            {
                if(BackupConfiguration(false, false))
                    Msg.Information("Configuration has been backed up successfully.");
                else
                    Msg.Warning("Configuration has not been backed up!");
            }
        }

        private void ConfigWindow_OnGameSelected(int GameID)
        {
            checkedListBox_GraphicOptions.Enabled = true;
            checkedListBox_MultiplayerOptions.Enabled = true;
            checkedListBox_ProgramOptionsOne.Enabled = true;
            checkedListBox_ProgramOptionsTwo.Enabled = true;
            checkedListBox_ProgramOptionsThree.Enabled = true;

            hScrollBar_GameSpeed.Enabled = true;

            this.UpdateUI();
        }

        private void Button_RestoreBaldurLua_Click(object sender, EventArgs e)
        {
            if (DialogResult.Yes == MessageBox.Show("Baldur.lua will be restored.",
                                                  "Information",
                                                  MessageBoxButtons.YesNo,
                                                  MessageBoxIcon.Asterisk))
            {
                if (IsBG1_Selected)
                {
                    if (BG_ConfigBackupManager.RestoreBackup())
                    {
                        Msg.Information("Successfully restored backup for BG:EE");
                        this.UpdateUI();
                    }
                    else
                    {
                        Msg.Error("Cannot restore backup for BG:EE");
                    }
                }

                if (IsBG2_Selected)
                {
                    if (BG2_ConfigBackupManager.RestoreBackup())
                    {
                        Msg.Information("Successfully restored backup for BG2:EE");
                        this.UpdateUI();
                    }
                    else
                    {
                        Msg.Error("Cannot restore backup for BG2:EE");
                    }
                }
            }
        }

        private void Button_BackupBaldurLua_Click(object sender, EventArgs e)
        {
            if (DialogResult.Yes == MessageBox.Show("Select Yes to create a new backup. Any existing backup will be overwritten.",
                                                   "Information",
                                                   MessageBoxButtons.YesNo,
                                                   MessageBoxIcon.Asterisk))
            {
                if (BackupConfiguration(true, true))
                    Msg.Information("Backup created successfully");
                else
                    Msg.Error("Error while creating backup");
            }
        }

        private void Button_About_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Baldur's Gate Configuration utility for Enhanced Edition.\n\n" +
                "Icon provided by OpenClipart-Vectors on pixabay.com\n\n" +
                "Created by silver_eagle.",
                            "About",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Asterisk);
        }

        private void RadioButton_ConfigureBGEE_Click(object sender, EventArgs e)
        {
            if (!this.BG1LuaConfig_Available)
            {
                Msg.Error("Configuration file for BGI is unavailable.");
                return;
            }

            this.BaldurPropertyManager = new(BG1LuaConfig_Path);

            radioButton_ConfigureBGEE.Checked = true;
            radioButton_ConfigureBGIIEE.Checked = false;

            this.GameSelected?.Invoke(1);
        }

        private void RadioButton_ConfigureBGIIEE_Click(object sender, EventArgs e)
        {
            if (!this.BG2LuaConfig_Available)
            {
                Msg.Error("Configuration file for BGII is unavailable.");
                return;
            }

            this.BaldurPropertyManager = new(BG2LuaConfig_Path);

            radioButton_ConfigureBGEE.Checked = false;
            radioButton_ConfigureBGIIEE.Checked = true;

            this.GameSelected?.Invoke(2);
        }

        private void CheckedListBox_GraphicOptions_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            if (BaldurPropertyManager is not null && Graphics_Properties.TryGetValue(e.Index, out var S))
                BaldurPropertyManager.SetBooleanProperty(S, e.NewValue == CheckState.Checked);
        }

        private void CheckedListBox_MultiplayerOptions_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            if (BaldurPropertyManager is not null && Multiplayer_Properties.TryGetValue(e.Index, out var S))
                BaldurPropertyManager.SetBooleanProperty(S, e.NewValue == CheckState.Checked);
        }

        private void CheckedListBox_ProgramOptionsOne_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            if (BaldurPropertyManager is not null && ProgramOptionsOne_Properties.TryGetValue(e.Index, out var S))
                BaldurPropertyManager.SetBooleanProperty(S, e.NewValue == CheckState.Checked);
        }

        private void CheckedListBox_ProgramOptionsTwo_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            if (BaldurPropertyManager is not null && ProgramOptionsTwo_Properties.TryGetValue(e.Index, out var S))
                BaldurPropertyManager.SetBooleanProperty(S, e.NewValue == CheckState.Checked);
        }

        private void CheckedListBox_ProgramOptionsThree_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            if (BaldurPropertyManager is not null && ProgramOptionsThree_Properties.TryGetValue(e.Index, out var S))
                BaldurPropertyManager.SetBooleanProperty(S, e.NewValue == CheckState.Checked);
        }
        
        private void Button_Close_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}